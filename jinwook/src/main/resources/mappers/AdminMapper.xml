<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jinwook.home.mapper.AdminMapper">

	<resultMap type="store" id="storeSelectMap">
	   <result property="storeNo"  column="store_no"    jdbcType="INTEGER"/>
	   <result property="storeName"  column="store_name"    jdbcType="VARCHAR"/>
	   <result property="storeType"  column="store_type"    jdbcType="VARCHAR"/>
	   <result property="userId"  column="user_id"    jdbcType="VARCHAR"/>
	   <result property="storeAddr"  column="store_addr"    jdbcType="VARCHAR"/>
	   <result property="storePhone"  column="store_phone"    jdbcType="VARCHAR"/>   
	   <result property="user.userName"  column="user_name"    jdbcType="VARCHAR"/>      
	</resultMap>
		
	<resultMap type="store" id="storeSelectMap2">
   <result property="storeNo"             column="store_no"       jdbcType="INTEGER"/>   
   <result property="userId"             column="user_id"        jdbcType="VARCHAR"/>   
   <result property="storeName"         column="store_name"     jdbcType="VARCHAR"/>
   <result property="storeAddr"         column="store_addr"     jdbcType="VARCHAR"/>
   <result property="storeType"         column="store_type"     jdbcType="CHAR"/>
   <result property="storeStatus"         column="store_status"   jdbcType="VARCHAR"/>
   <result property="storePhone"         column="store_phone"    jdbcType="VARCHAR"/>
   <result property="storeIntro"         column="store_intro"    jdbcType="VARCHAR"/>
   <result property="storeStart"         column="store_start"    jdbcType="DATE"/>
   <result property="startTime"         column="start_time"     jdbcType="TIME"/>
   <result property="endTime"             column="end_time"       jdbcType="TIME"/>
   <result property="holiday"             column="holiday"        jdbcType="VARCHAR"/>
   <result property="businessCard"      column="business_card" jdbcType="VARCHAR"/>
   <result property="storeImage"         column="store_image"    jdbcType="VARCHAR"/>
   <result property="accNo"             column="acc_no"         jdbcType="VARCHAR"/>
   <result property="bank"                 column="bank"           jdbcType="VARCHAR"/>
   <result property="totalEarn"         column="total_earn"     jdbcType="INTEGER"/>
   <result property="isOpen"             column="is_open"        jdbcType="TINYINT"/>  
   <result property="latitude"                 column="latitude"           jdbcType="INTEGER"/>
   <result property="longitude"                 column="longitude"           jdbcType="INTEGER"/> 
   <result property="user.jpBalance"     column="jp_balance"     jdbcType="INTEGER"/>
   <result property="user.userName"     column="user_name"     jdbcType="VARCHAR"/>   
   <result property="user.businessNo"     column="business_no"     jdbcType="VARCHAR"/>  
   <result property="user.regDate"     column="reg_date"     jdbcType="DATE"/>     
   <result property="orders.reviewStar"  column="review_star"    jdbcType="INTEGER"/>
   <result property="orders.orderPrice"  column="order_price"    jdbcType="DATE"/>
   <result property="orders.orderNo"  column="order_no"    jdbcType="INTEGER"/>
   <result property="orders.orderDate"  column="order_date"    jdbcType="DATE"/>
   <result property="orders.buyerName"  column="buyer_name"    jdbcType="VARCHAR"/>
   <result property="product.prodNo"     column="prod_no"        jdbcType="INTEGER"/>     
   <result property="product.prodName"   column="prod_name"      jdbcType="VARCHAR"/>     
   <result property="product.prodImg"   column="prod_img"      jdbcType="VARCHAR"/>     
   <result property="product.price"      column="price"          jdbcType="INTEGER"/>     
   <result property="product.prodOrign"  column="prod_orign"    jdbcType="VARCHAR"/>   
   <result property="product.prodInfo"  column="prod_info"    jdbcType="VARCHAR"/>  
   <result property="product.isSoldout"  column="is_soldout"    jdbcType="INTEGER"/>       
   <result property="request.resDate"      column="res_date"     jdbcType="DATE"/>     
   <result property="request.reqDate"  column="req_date"    jdbcType="DATE"/>   
   <result property="request.refundMoney"  column="refund_money"    jdbcType="INTEGER"/> 
   <result property="request.userId"  column="user_id"    jdbcType="VARCHAR"/>    
   <result property="request.reqStatus"  column="req_status"    jdbcType="CHAR"/>              
</resultMap>
	
	<sql id="usersColumns">
		  user_id
		, user_name
		, email
		, birth
		, gender
		, nick_name
		, phone
		, role
		, grade
		, business_no
		, blacklist_status
		, blacklist_reg_date
		, blacklist_end_date
		, reg_date
		, user_bye_status
	</sql>
	
	<!--  카테고리별 상점 목록  -->
   <select id="getStoreList" parameterType="String" resultMap="storeSelectMap2">
 	  SELECT
	      s.store_no, s.store_phone, s.store_name, s.store_type, s.store_addr,
	      s.store_intro, vt.review_star
      FROM 
      	  store s, orders o,
      	  (SELECT ROUND(AVG(review_star),1) review_star FROM orders)vt
      WHERE s.store_type= #{storeType}
      GROUP BY store_no
   </select>

	<!-- 유저 상세 -->
	<select id="getUserAdmin" parameterType="String" resultType="user">
		SELECT
			<include refid="usersColumns"/>
		FROM
			users
		WHERE
			user_id = #{userId}
	</select>
	
	
	<!-- 유저 목록 -->
	<select id="getUserListAdmin" parameterType="Criteria" resultType="User">
		SELECT
			user_id, user_name, phone, role
		FROM
			users
		WHERE
			user_bye_status = 0 
		<include refid="CommonMapper.search" />		
		ORDER BY 
			reg_date
		<include refid="CommonMapper.paging" />
		
	</select>
	
	
	<!-- 유저 목록 개수 -->
	<select id="getUserTotalCount" parameterType="Criteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			users
		WHERE
			user_bye_status = 0
		<include refid="CommonMapper.search" />
	</select>
	
	
	<!-- 상점 목록 -->
	<select id="getStoreListAdmin" parameterType="Criteria" resultMap="storeSelectMap">
		SELECT
			 s.store_no, u.user_name, s.store_name, s.user_id, s.store_addr, s.store_phone, s.store_type
		FROM
			store s, users u
		WHERE 
			s.user_id = u.user_id
			AND 
			s.store_status = 2
				
		ORDER BY 
			s.store_no
		<include refid="CommonMapper.paging" />
	</select>
	
	
	<!-- 상점 목록 개수 -->
	<select id="getStoreTotalCount" parameterType="Criteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			store
		WHERE 
			store_status = 2

	</select>
	
	
	<!-- 신고 등록 -->
	<insert id="addComplain" parameterType="Complain">
			INSERT INTO complain 
			VALUES (
				  NULL
				, #{userId} <!-- 신고당한 아이디 -->
				, #{complainId} <!-- 신고한 아이디 (세션)-->
				, SYSDATE()
				, #{complainCode}
				, #{complainTarget} <!-- reqNo, commentNo,  -->
				, #{complainTargetNo} <!-- 컬럼 추가해야 할듯 ... reqNo, commentNo, reviewNo 받는 -->
				, false
				, false
			)
			<!-- 해당 게시글로 넘어갈 수 있는 메서드 필요... board에 있을듯 ... -->
	</insert>


	<!-- 신고 목록 -->
	<select id="getComplainListAdmin" parameterType="Criteria" resultType="Complain">
		SELECT
			 *
		FROM
			complain
		WHERE
			complain_delete_yn = false
		ORDER BY 
			complain_no
		LIMIT
			#{paginationInfo.firstRecordIndex}, #{recordsPerPage}
	</select>
	
	
	<!-- 신고 목록 개수 -->
	<select id="getComplainTotalCount" parameterType="Criteria" resultType="int">
		SELECT
			COUNT(*)
		FROM
			complain
		WHERE
			complain_delete_yn = false
	</select>
	
	<!-- 대기중인 신고 목록 개수 -->
	<select id="getComplainTotalCountAll"  resultType="int">
		SELECT
			COUNT(*)
		FROM
			complain
		WHERE
			complain_status = 0
			AND
			complain_delete_yn = false
	</select>
	
	<!-- 신고 목록 삭제 -->
	<update id="deleteComplain" parameterType="int">
		UPDATE
			complain
		SET
			complain_delete_yn = true
		WHERE 
			complain_no = ${complainNo}
	</update>
	
	<!-- 블랙리스트 등록 -->
	<update id="updateBlacklist" parameterType="Complain">
		UPDATE users
		<set>
			blacklist_status = true,
			blacklist_reg_date = SYSDATE(),
			<if test= 'user.blackPeriod == "7days"'>
			blacklist_end_date = DATE_ADD(DATE(NOW()), INTERVAL +7 DAY)
			</if>
			<if test= 'user.blackPeriod == "1month"'>
			blacklist_end_date = DATE_ADD(DATE(NOW()), INTERVAL +1 MONTH)
			</if>
			<if test= 'user.blackPeriod == "6month"'>
			blacklist_end_date = DATE_ADD(DATE(NOW()), INTERVAL +6 MONTH)
			</if>
			<if test= 'user.blackPeriod == "1year"'>
			blacklist_end_date = DATE_ADD(DATE(NOW()), INTERVAL +1 YEAR)
			</if>
		</set>
		WHERE
			user_id = #{user.userId}
	</update>
	
	
	<!-- complainStatus 변경 (false->true) -->
	<update id="updateComplainStatus" parameterType="Complain">
		UPDATE complain
		SET
			complain_status = true
		WHERE
			complain_no = #{complanNo}
	</update>
	
	
	
	<!-- 블랙리스트 목록 -->
	<select id="getBlacklistAdmin" parameterType="User" resultType="User">
		SELECT
			u.user_id, u.user_name, u.nick_name, u.birth, u.gender, u.email, u.phone, u.blacklist_reg_date, u.blacklist_end_date, c.complain_code 
		FROM
			users u, complain c
		WHERE
			u.user_id = c.user_id
			AND
			user_bye_status = 0
			AND 
			u.blacklist_status = true
		GROUP BY
			u.user_id
	</select>
	
	
	<!-- 블랙리스트 목록 개수 -->
	<select id="getBlacklistTotalCount" parameterType="User" resultType="int">
		SELECT
			COUNT(*)
		FROM
			users
		WHERE
			blacklist_status = true
			AND
			user_bye_status = 0
	</select>
	
	
	<!-- 대기중인 문의 목록 개수 -->
	<select id="getWatingInquiryCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		WHERE
			board_inq_status = 0
	</select>
	
	
	<!-- 차트 -->
	<!-- 월별 회원가입 -->
	<select id="getJoinForMonthChart" resultType="Chart">
	SELECT 
		CONCAT(YEAR(reg_date), '-', MONTH(reg_date)) AS ym, count(*) AS count
	FROM 
		users
	WHERE 
		YEAR(reg_date) = 2022
	GROUP BY 
		ym
	ORDER BY 
		ym
	</select>
	
	<!-- 역할별 사용자 -->
 	<select id="getUserByRole" resultType="Chart">
	SELECT DISTINCT 
		(SELECT COUNT(*) FROM users WHERE role = '사용자')AS user_count, 
		(SELECT COUNT(*) FROM users WHERE role = '사장님')AS ceo_count, 
		(SELECT COUNT(*) FROM users WHERE role = '관리자')AS admin_count
	FROM 
		users;
	</select> 
	
	<!-- 월별 주문수 / 주문금액 -->
 	<select id="getOrderCountAndPrice" resultType="Chart">
	SELECT 
		CONCAT(YEAR(order_date), '-', MONTH(order_date)) AS ym,
		count(*) AS count, 
		SUM(order_price)/10000 AS sum_price
	FROM 
		orders
	WHERE 
		YEAR(order_date) = 2022
	GROUP BY 
		ym
	ORDER BY 
		ym
	</select> 
	
	<!-- 사용자 구분(일반/블랙/탈퇴) -->
 	<select id="getUserType" resultType="Chart">
	SELECT DISTINCT
		(SELECT 
			COUNT(*) 
		 FROM 
		 	users
		 WHERE 
		 	user_bye_status = false AND blacklist_status = FALSE
		) AS user_count,
		
		(SELECT 
			COUNT(*) 
		 FROM 
		 	users
		 WHERE 
		 	user_bye_status = false AND blacklist_status = TRUE
		) AS blacklist_count,
		
		(SELECT 
			COUNT(*) 
		 FROM 
		 	users
		 WHERE 
		 	user_bye_status = TRUE
		)AS bye_user_count
		
	FROM 
		users;
	</select> 
	

</mapper>